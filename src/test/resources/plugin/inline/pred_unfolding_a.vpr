field x: Ref

predicate has_x(r: Ref)
{
    acc(r.x)
}

predicate has_x2(r: Ref) {
    acc(r.x) && has_x(r.x)
}

inline predicate interesting(r: Ref) {
    has_x2(r) && unfolding has_x2(r) in unfolding has_x(r.x) in r.x.x == null
}


method test(r: Ref)
requires acc(interesting(r), 1/2) {
    unfold acc(interesting(r), 1/2)
    unfold acc(has_x2(r), 1/2)
    unfold acc(has_x(r.x), 1/2)
    assert r.x.x == null
}
