field f: Int
field inner: Ref

inline predicate outer(r: Ref) {
  acc(r.inner) && has_f(r.inner)
}

inline predicate has_f(r: Ref) {
  acc(r.f) && r.f >= 0
}


method get_inner(x: Ref, p: Perm) returns (res: Ref)
  requires acc(outer(x), p)
  ensures  acc(has_f(res), p)
{
  if (p == none) {
    res := null
  } else {
    unfold acc(outer(x), p)
    res := x.inner
  }
}
